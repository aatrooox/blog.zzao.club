generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id           String           @id @default(uuid(7))
  email        String?
  phone        String?
  username     String           @unique
  nickname     String?          @unique
  password     String
  avatar_url   String?
  website      String? // 个人网站
  role         String           @default("user") // user / visitor / admin /superAdmin
  status       Int              @default(1) // 1: 正常，2: 临时 3: 禁用 
  comments     BlogComment[]
  sub_comments BlogSubComment[]
  likes        BlogLike[]
  oauth        OAuth[]
  tokens       AccessToken[]
  user_config  UserConfig?
  memos        BlogMemo[]
  tags         MemoTag[]

  @@map("blog_user")
}

model UserConfig {
  id               String   @id @default(uuid(7))
  userId           String   @unique
  userInfo         User     @relation(fields: [userId], references: [id])
  allowEmailNotify Int?     @default(0) // 是否接收邮件通知
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("blog_user_config")
}

model AccessToken {
  id        String   @id @default(uuid(7))
  userId    String // 关联到主用户表
  userInfo  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  roles     String   @default("user") // user,template,preset,all  预留字段
  status    Int      @default(1) // 1: 正常，2: 禁用 3 4 5...预留字段
  scope     String   @default("all") // 生效范围：如 pc? app？ imgx? blog ？预留字段
  isRevoked Boolean  @default(false)
  ip        String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_access_token")
}

// 第三方登录
model OAuth {
  id                   String   @id @default(uuid(7))
  userId               String? // 关联到主用户表
  provider             String // 'github', 'google', 'wechat' 等
  providerId           String // 第三方平台的用户ID
  providerUnionId      String? // 第三方生态中跨应用用户唯一id
  providerToken        String? // 第三方平台的用户token
  providerRefreshToken String? // 第三方平台的用户refresh token
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("blog_oauth")
}

// 博客 一级评论表
model BlogComment {
  id           String           @id @default(uuid(7))
  content      String           @db.MediumText
  create_ts    DateTime         @default(now())
  updated_ts   DateTime         @updatedAt
  type         String           @default("article") // article / memo / blog / paragraph(引用段落评论) 
  quoteContent String? // 引用内容
  article_id   String?
  user_id      String?
  user_info    User?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  visitorName  String?
  sub_comments BlogSubComment[] // 一对多的二级评论
  likes        BlogLike[]
  memo_id      String?
  memo_info    BlogMemo?        @relation(fields: [memo_id], references: [id])

  @@map("blog_comment")
}

// 博客文章注解，用于解释某个名词或者语义 （仅限一个 p 标签内）
model BlogExplain {
  id         String   @id @default(uuid(7))
  create_ts  DateTime @default(now())
  updated_ts DateTime @updatedAt
  text       String   @db.MediumText // 对应的名词和文本
  content    String   @db.MediumText // 注解内容
  article_id String

  @@map("blog_explain")
}

// 博客 二级评论表
model BlogSubComment {
  id                   String      @id @default(uuid(7))
  content              String      @db.MediumText
  create_ts            DateTime    @default(now())
  updated_ts           DateTime    @updatedAt
  comment_id           String
  // 如果一级评论删除了，则删除所有二级评论
  comment_info         BlogComment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  reply_sub_comment_id String?
  user_id              String?
  user_info            User?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes                BlogLike[]

  @@map("blog_sub_comment")
}

// 博客 点赞表
model BlogLike {
  id               Int             @id @default(autoincrement())
  create_ts        DateTime        @default(now())
  updated_ts       DateTime        @updatedAt
  target           String          @default("article") // article / memo / comment / subcomment
  article_id       String?
  sub_comment_id   String?
  sub_comment_info BlogSubComment? @relation(fields: [sub_comment_id], references: [id])
  comment_id       String?
  comment_info     BlogComment?    @relation(fields: [comment_id], references: [id])
  user_id          String
  user_info        User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blogMemoInfo     BlogMemo?       @relation(fields: [blogMemoId], references: [id])
  blogMemoId       String?

  @@map("blog_like")
}

model BlogMemo {
  id            String             @id @default(uuid(7))
  content       String?            @db.MediumText
  create_ts     DateTime           @default(now())
  updated_ts    DateTime           @updatedAt
  visible       String             @default("public") // 可见性 public / group / private 
  defalt_floded Boolean            @default(false) // 默认折起
  flod_tip      String? // 折起时，在标题栏展示折起的原因
  user_id       String
  user_info     User               @relation(fields: [user_id], references: [id], onDelete: NoAction)
  from          String? // 来自什么平台 微信读书 浏览器 第三方平台调用api 等
  courier       String? // 通过谁录入此信息
  tags          MemoTagRelations[]
  comments      BlogComment[]
  likes         BlogLike[]

  @@map("blog_memos")
}

model MemoTag {
  id         String             @id @default(uuid(7))
  tag_name   String             @unique
  create_ts  DateTime           @default(now())
  updated_ts DateTime           @updatedAt
  user_id    String
  user_info  User               @relation(fields: [user_id], references: [id], onDelete: NoAction)
  memos      MemoTagRelations[]

  @@map("blog_memo_tag")
}

model MemoTagRelations {
  tagId      String
  tag        MemoTag  @relation(fields: [tagId], references: [id], onDelete: NoAction)
  memoId     String
  memo       BlogMemo @relation(fields: [memoId], references: [id], onDelete: NoAction)
  create_ts  DateTime @default(now())
  updated_ts DateTime @updatedAt

  @@id([tagId, memoId])
  @@map("blog_memo_tag_relations")
}

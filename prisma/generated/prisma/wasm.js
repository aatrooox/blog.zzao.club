/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true })

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require('./runtime/index-browser.js')

const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: '6.13.0',
  engine: '361e86d0ea4987e9f53a565309b3eed797a6bcbd',
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.validator = Public.validator

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
  )
}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
})

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  username: 'username',
  nickname: 'nickname',
  password: 'password',
  avatar_url: 'avatar_url',
  website: 'website',
  role: 'role',
  status: 'status',
}

exports.Prisma.UserConfigScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  allowEmailNotify: 'allowEmailNotify',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.AccessTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  roles: 'roles',
  status: 'status',
  scope: 'scope',
  isRevoked: 'isRevoked',
  ip: 'ip',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.OAuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerId: 'providerId',
  providerUnionId: 'providerUnionId',
  providerToken: 'providerToken',
  providerRefreshToken: 'providerRefreshToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.BlogCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  create_ts: 'create_ts',
  updated_ts: 'updated_ts',
  type: 'type',
  quoteContent: 'quoteContent',
  article_id: 'article_id',
  user_id: 'user_id',
  visitorName: 'visitorName',
  memo_id: 'memo_id',
}

exports.Prisma.BlogExplainScalarFieldEnum = {
  id: 'id',
  create_ts: 'create_ts',
  updated_ts: 'updated_ts',
  text: 'text',
  content: 'content',
  article_id: 'article_id',
}

exports.Prisma.BlogSubCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  create_ts: 'create_ts',
  updated_ts: 'updated_ts',
  comment_id: 'comment_id',
  reply_sub_comment_id: 'reply_sub_comment_id',
  user_id: 'user_id',
}

exports.Prisma.BlogLikeScalarFieldEnum = {
  id: 'id',
  create_ts: 'create_ts',
  updated_ts: 'updated_ts',
  target: 'target',
  article_id: 'article_id',
  sub_comment_id: 'sub_comment_id',
  comment_id: 'comment_id',
  user_id: 'user_id',
  blogMemoId: 'blogMemoId',
}

exports.Prisma.BlogMemoScalarFieldEnum = {
  id: 'id',
  content: 'content',
  create_ts: 'create_ts',
  updated_ts: 'updated_ts',
  visible: 'visible',
  defalt_floded: 'defalt_floded',
  flod_tip: 'flod_tip',
  user_id: 'user_id',
  from: 'from',
  courier: 'courier',
}

exports.Prisma.MemoTagScalarFieldEnum = {
  id: 'id',
  tag_name: 'tag_name',
  create_ts: 'create_ts',
  updated_ts: 'updated_ts',
  user_id: 'user_id',
}

exports.Prisma.MemoTagRelationsScalarFieldEnum = {
  tagId: 'tagId',
  memoId: 'memoId',
  create_ts: 'create_ts',
  updated_ts: 'updated_ts',
}

exports.Prisma.GarminActivityScalarFieldEnum = {
  id: 'id',
  activityType: 'activityType',
  date: 'date',
  isFavorite: 'isFavorite',
  title: 'title',
  distance: 'distance',
  calories: 'calories',
  duration: 'duration',
  movingTime: 'movingTime',
  elapsedTime: 'elapsedTime',
  avgHr: 'avgHr',
  maxHr: 'maxHr',
  aerobicEffect: 'aerobicEffect',
  trainingStressScore: 'trainingStressScore',
  avgPace: 'avgPace',
  bestPace: 'bestPace',
  totalStrokes: 'totalStrokes',
  avgSwolf: 'avgSwolf',
  avgStrokeRate: 'avgStrokeRate',
  steps: 'steps',
  totalReps: 'totalReps',
  totalSets: 'totalSets',
  isGrit: 'isGrit',
  bestLapTime: 'bestLapTime',
  lapCount: 'lapCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
}

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
}

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  username: 'username',
  nickname: 'nickname',
  password: 'password',
  avatar_url: 'avatar_url',
  website: 'website',
  role: 'role',
}

exports.Prisma.UserConfigOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
}

exports.Prisma.AccessTokenOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  roles: 'roles',
  scope: 'scope',
  ip: 'ip',
}

exports.Prisma.OAuthOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerId: 'providerId',
  providerUnionId: 'providerUnionId',
  providerToken: 'providerToken',
  providerRefreshToken: 'providerRefreshToken',
}

exports.Prisma.BlogCommentOrderByRelevanceFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  quoteContent: 'quoteContent',
  article_id: 'article_id',
  user_id: 'user_id',
  visitorName: 'visitorName',
  memo_id: 'memo_id',
}

exports.Prisma.BlogExplainOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  content: 'content',
  article_id: 'article_id',
}

exports.Prisma.BlogSubCommentOrderByRelevanceFieldEnum = {
  id: 'id',
  content: 'content',
  comment_id: 'comment_id',
  reply_sub_comment_id: 'reply_sub_comment_id',
  user_id: 'user_id',
}

exports.Prisma.BlogLikeOrderByRelevanceFieldEnum = {
  target: 'target',
  article_id: 'article_id',
  sub_comment_id: 'sub_comment_id',
  comment_id: 'comment_id',
  user_id: 'user_id',
  blogMemoId: 'blogMemoId',
}

exports.Prisma.BlogMemoOrderByRelevanceFieldEnum = {
  id: 'id',
  content: 'content',
  visible: 'visible',
  flod_tip: 'flod_tip',
  user_id: 'user_id',
  from: 'from',
  courier: 'courier',
}

exports.Prisma.MemoTagOrderByRelevanceFieldEnum = {
  id: 'id',
  tag_name: 'tag_name',
  user_id: 'user_id',
}

exports.Prisma.MemoTagRelationsOrderByRelevanceFieldEnum = {
  tagId: 'tagId',
  memoId: 'memoId',
}

exports.Prisma.GarminActivityOrderByRelevanceFieldEnum = {
  id: 'id',
  activityType: 'activityType',
  title: 'title',
}

exports.Prisma.ModelName = {
  User: 'User',
  UserConfig: 'UserConfig',
  AccessToken: 'AccessToken',
  OAuth: 'OAuth',
  BlogComment: 'BlogComment',
  BlogExplain: 'BlogExplain',
  BlogSubComment: 'BlogSubComment',
  BlogLike: 'BlogLike',
  BlogMemo: 'BlogMemo',
  MemoTag: 'MemoTag',
  MemoTagRelations: 'MemoTagRelations',
  GarminActivity: 'GarminActivity',
}

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`
        }
        else {
          message = `PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in \`${runtime.prettyName}\`).`
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      },
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
